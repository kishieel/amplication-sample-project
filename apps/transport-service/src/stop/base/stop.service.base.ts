/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Stop as PrismaStop,
  Route as PrismaRoute,
} from "@prisma/client";

export class StopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StopCountArgs, "select">): Promise<number> {
    return this.prisma.stop.count(args);
  }

  async stops(args: Prisma.StopFindManyArgs): Promise<PrismaStop[]> {
    return this.prisma.stop.findMany(args);
  }
  async stop(args: Prisma.StopFindUniqueArgs): Promise<PrismaStop | null> {
    return this.prisma.stop.findUnique(args);
  }
  async createStop(args: Prisma.StopCreateArgs): Promise<PrismaStop> {
    return this.prisma.stop.create(args);
  }
  async updateStop(args: Prisma.StopUpdateArgs): Promise<PrismaStop> {
    return this.prisma.stop.update(args);
  }
  async deleteStop(args: Prisma.StopDeleteArgs): Promise<PrismaStop> {
    return this.prisma.stop.delete(args);
  }

  async getRoute(parentId: string): Promise<PrismaRoute | null> {
    return this.prisma.stop
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
