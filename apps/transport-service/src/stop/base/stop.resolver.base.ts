/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Stop } from "./Stop";
import { StopCountArgs } from "./StopCountArgs";
import { StopFindManyArgs } from "./StopFindManyArgs";
import { StopFindUniqueArgs } from "./StopFindUniqueArgs";
import { CreateStopArgs } from "./CreateStopArgs";
import { UpdateStopArgs } from "./UpdateStopArgs";
import { DeleteStopArgs } from "./DeleteStopArgs";
import { Route } from "../../route/base/Route";
import { StopService } from "../stop.service";
@graphql.Resolver(() => Stop)
export class StopResolverBase {
  constructor(protected readonly service: StopService) {}

  async _stopsMeta(
    @graphql.Args() args: StopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Stop])
  async stops(@graphql.Args() args: StopFindManyArgs): Promise<Stop[]> {
    return this.service.stops(args);
  }

  @graphql.Query(() => Stop, { nullable: true })
  async stop(@graphql.Args() args: StopFindUniqueArgs): Promise<Stop | null> {
    const result = await this.service.stop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stop)
  async createStop(@graphql.Args() args: CreateStopArgs): Promise<Stop> {
    return await this.service.createStop({
      ...args,
      data: {
        ...args.data,

        route: args.data.route
          ? {
              connect: args.data.route,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Stop)
  async updateStop(@graphql.Args() args: UpdateStopArgs): Promise<Stop | null> {
    try {
      return await this.service.updateStop({
        ...args,
        data: {
          ...args.data,

          route: args.data.route
            ? {
                connect: args.data.route,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Stop)
  async deleteStop(@graphql.Args() args: DeleteStopArgs): Promise<Stop | null> {
    try {
      return await this.service.deleteStop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Route, {
    nullable: true,
    name: "route",
  })
  async getRoute(@graphql.Parent() parent: Stop): Promise<Route | null> {
    const result = await this.service.getRoute(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
